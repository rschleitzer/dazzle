;; Skeme Showcase Template
;; Demonstrates all Phase 1 features

(display "=== Skeme Feature Showcase ===\n\n")

;; Feature 1: Grove Navigation
(display "1. Grove Navigation\n")
(display "   Root element: ")
(display (gi current-root))
(display "\n")

(define class-name (attribute-string current-root "name"))
(define package-name (attribute-string current-root "package"))

(display "   Class: ")
(display class-name)
(display "\n")
(display "   Package: ")
(display package-name)
(display "\n\n")

;; Feature 2: select-elements primitive
(display "2. Node List Filtering\n")
(define all-children (children current-root))
(define fields (select-elements all-children "field"))
(define methods (select-elements all-children "method"))

(display "   Total children: ")
(display (node-list-length all-children))
(display "\n")
(display "   Fields: ")
(display (node-list-length fields))
(display "\n")
(display "   Methods: ")
(display (node-list-length methods))
(display "\n\n")

;; Feature 3: Node list iteration
(display "3. Field Details\n")
(define (show-fields nl)
  (if (not (node-list-empty? nl))
      (let ((field (node-list-first nl)))
        (display "   - ")
        (display (attribute-string field "type"))
        (display " ")
        (display (attribute-string field "name"))
        (display "\n")
        (show-fields (node-list-rest nl)))
      #t))

(show-fields fields)

;; Feature 4: descendants primitive
(display "\n4. Descendants (all nested nodes)\n")
(define all-descendants (descendants current-root))
(display "   Total descendants: ")
(display (node-list-length all-descendants))
(display "\n\n")

;; Feature 5: Code Generation
(display "5. Java Code Generation\n")

(define (generate-field f)
  (string-append
    "    private " (attribute-string f "type")
    " " (attribute-string f "name") ";\n"))

(define (generate-method m)
  (string-append
    "    public " (attribute-string m "returnType")
    " " (attribute-string m "name") "() {\n"
    "        throw new UnsupportedOperationException(\"Not implemented\");\n"
    "    }\n\n"))

(define (node-list->list nl)
  (if (node-list-empty? nl)
      '()
      (cons (node-list-first nl) (node-list->list (node-list-rest nl)))))

(define field-code (apply string-append (map generate-field (node-list->list fields))))
(define method-code (apply string-append (map generate-method (node-list->list methods))))

(define java-class
  (string-append
    "package " package-name ";\n\n"
    "/**\n"
    " * Generated by Skeme\n"
    " * Class: " class-name "\n"
    " */\n"
    "public class " class-name " {\n\n"
    field-code
    "\n"
    method-code
    "}\n"))

(display "   Generated ")
(display (string-length java-class))
(display " characters of Java code\n\n")

;; Feature 6: File Output
(display "6. File Output\n")
(define output-file (string-append "generated/" class-name ".java"))
(display "   Writing to: ")
(display output-file)
(display "\n")

(define output-sosofo (make-entity output-file (literal java-class)))
(define write-result (write-sosofo output-sosofo))

(if write-result
    (display "   ✓ File written successfully\n")
    (display "   ✗ File write failed\n"))

(display "\n=== Showcase Complete ===\n")

#t
