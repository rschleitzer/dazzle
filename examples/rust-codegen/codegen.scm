;; Dazzle Code Generator: XML Model â†’ Rust Structs
;; Now using named let for iteration!

;; Generate a single Rust field
(define (generate-field field-node)
  (let ((name (attribute-string "name" field-node))
        (type (attribute-string "type" field-node))
        (required (attribute-string "required" field-node)))
    (string-append
      "    pub " name ": "
      (if (equal? required "false")
          (string-append "Option<" type ">")
          type)
      ",\n")))

;; Generate all fields using named let!
(define (generate-all-fields fields)
  (let loop ((i 0) (result ""))
    (if (< i (node-list-length fields))
        (loop (+ i 1)
              (string-append result (generate-field (node-list-ref fields i))))
        result)))

;; Generate a Rust struct
(define (generate-struct struct-node)
  (let ((name (attribute-string "name" struct-node))
        (fields (children struct-node)))
    (string-append
      "#[derive(Debug, Clone, PartialEq)]\n"
      "pub struct " name " {\n"
      (generate-all-fields fields)
      "}\n\n")))

;; Generate all structs using named let!
(define (generate-all-structs structs)
  (let loop ((i 0) (result ""))
    (if (< i (node-list-length structs))
        (loop (+ i 1)
              (string-append result (generate-struct (node-list-ref structs i))))
        result)))

;; Main
(let ((root (current-node)))
  (let ((structs (children root)))
    (string-append
      "// Auto-generated by Dazzle with NAMED LET!\n"
      "// Source: model.xml\n\n"
      (generate-all-structs structs))))
